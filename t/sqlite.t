use strict;
use warnings;
use Test::More tests => 22;
use lib 'lib';
use Chalice::Model;

my $year = (localtime)[5] + 1900;
my $dbname = 't/data/sqlite/blog.sqlite';
unlink $dbname;

my $m = Chalice::Model->new(
    storage     => 'SQLite',
    dbname      =>  $dbname,
);

isa_ok $m,      'Chalice::Model::SQLite';
$m->update(title => 'A Test Blog', tagline => 'Something witty');
is $m->title,   'A Test Blog', 'title';
is $m->tagline, 'Something witty', 'tagline';

$m->delete_all;
ok !$m->post_by_url("$year/foo-bar"), 'post not there yet';
my @posts = $m->newest_posts(5);
is scalar(@posts), 0, 'No posts yet';

ok !eval { $m->create_post() }, 'empty create_post fails';
my %data = (
    title       => 'foo bar',
    body        => 'some test',
    body_format => 'rawhtml',
);
my $post;
ok eval {$post = $m->create_post(%data); 1 }, 'can create a post with autogenerated URL';
is $post->title, 'foo bar', 'title preserved';
is +(split qr{/}, $post->url)[1], 'foo-bar', 'autogenerated URL works out';

ok +($post = $m->post_by_url("$year/foo-bar")), 'can retrieve post by URL';
is $post->title, 'foo bar', '... and it has the right title';
is $post->body_rendered, 'some test', 'rawhtml just copies verbatime';
$post->delete;
ok !defined($m->post_by_url("$year/foo-bar")), 'after ->delete, the post is gone';


$m->create_post(title => 1, body => 11, body_format => 'rawhtml');
$m->create_post(title => 2, body => 12, body_format => 'rawhtml');
$m->create_post(title => 3, body => 13, body_format => 'rawhtml');

@posts = $m->newest_posts();
is scalar(@posts), 3, 'Four posts';
is join(', ', map $_->title, @posts), '3, 2, 1',
    'got posts in order';
is join(', ', map $_->title, $m->newest_posts(2)), '3, 2',
    'limiting number of posts works';

$_->delete for $m->all_posts;
my %common = (body => 1, body_format => 'rawhtml');
$m->create_post(title => '1', url => "a/1", %common);
$m->create_post(title => '2', url => "b/2", %common);
$m->create_post(title => '3', url => "b/3", %common);
$m->create_post(title => '4', url => "a/4", %common);

is join(', ', map $_->title, $m->posts_by_url_prefix('a')),
    '4, 1',
   'posts_by_url_prefix a';

is join(', ', map $_->title, $m->posts_by_url_prefix('b')),
    '3, 2',
   'posts_by_url_prefix b';

is join(', ', map $_->title, $m->posts_by_url_prefix('foo')),
    '',
   'posts_by_url_prefix with non-existing prefix';

$post = $m->post_by_url('a/1');
$post->update(title => 'foo');
is $post->title, 'foo', 'update worked (in-memory)';
is $m->post_by_url('a/1')->title, 'foo', 'update worked (from storage)';
cmp_ok $post->modification_date, '>', $post->creation_date,
        'modification timestamp updated';
